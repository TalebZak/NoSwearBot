DROP TABLE IF EXISTS MEMBERSHIP;
DROP TABLE IF EXISTS BLACKLIST;
DROP TABLE IF EXISTS GUILD;
DROP TABLE IF EXISTS MEMBER;
DROP TRIGGER IF EXISTS trdelMemship ON MEMBERSHIP;


CREATE TABLE IF NOT EXISTS MEMBER(
    Id BIGINT,
    username VARCHAR,
    isbot BOOLEAN,
    PRIMARY KEY(Id)
);
CREATE TABLE IF NOT EXISTS GUILD(
    Id BIGINT,
    name VARCHAR,
    limits INT DEFAULT 3,
    silencePenalty INT DEFAULT 0,
    PRIMARY KEY(Id)
);
CREATE TABLE IF NOT EXISTS BLACKLIST(
    guildId BIGINT,
    term VARCHAR,
    PRIMARY KEY(term,guildId),
    CONSTRAINT has FOREIGN KEY(guildId) REFERENCES GUILD(Id)
);
CREATE TABLE IF NOT EXISTS MEMBERSHIP(
    memberId BIGINT,
    guildId BIGINT,
    infrigement INT DEFAULT 0,
    PRIMARY KEY(memberId, guildId),
    CONSTRAINT joins FOREIGN KEY(memberId) REFERENCES MEMBER(Id),
    CONSTRAINT tracks FOREIGN KEY(guildId) REFERENCES GUILD(Id)
);
CREATE OR REPLACE FUNCTION remove_membership()
    RETURNS TRIGGER
AS $$
DECLARE limits INT;
BEGIN
    SELECT limits FROM GUILD WHERE Id = NEW.guildId INTO limits;
    IF NEW.infrigement = limits THEN
        DELETE FROM MEMBERSHIP
        WHERE memberId = NEW.memberId AND guildId = NEW.guildId;
    END IF;
    RETURN NEW;
END;
$$
LANGUAGE PLPGSQL;
CREATE TRIGGER trdelMemship AFTER UPDATE ON MEMBERSHIP
    FOR EACH ROW
    WHEN(OLD.infrigement IS DISTINCT FROM NEW.infrigement)
    EXECUTE FUNCTION remove_membership();

CREATE OR REPLACE FUNCTION reset_count()
    RETURNS TRIGGER
AS $$
BEGIN
    UPDATE MEMBERSHIP
    SET infrigement = 0
    WHERE guildId = NEW.guildId;
    RETURN NEW;
END;
$$
LANGUAGE PLPGSQL;
CREATE TRIGGER trupdatelimits AFTER UPDATE ON GUILD
    FOR EACH ROW
    WHEN(OLD.limits IS DISTINCT FROM NEW.limits)
    EXECUTE FUNCTION reset_count();